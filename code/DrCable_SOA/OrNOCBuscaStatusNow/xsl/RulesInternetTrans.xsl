<?xml version="1.0" encoding="UTF-8" ?>
<?oracle-xsl-mapper
  <!-- SPECIFICATION OF MAP SOURCES AND TARGETS, DO NOT MODIFY. -->
  <mapSources>
    <source type="XSD">
      <schema location="../xsd/OrNOCBuscaStatusNow.xsd"/>
      <rootElement name="processResponse" namespace="http://xmlns.cablevision.net.mx/DrCable_SOA/DrCable/OrNOCBuscaStatusNow"/>
    </source>
  </mapSources>
  <mapTargets>
    <target type="XSD">
      <schema location="../xsd/GetDiagnostic_DSMessageTypes.xsd"/>
      <rootElement name="callFunctionStateless" namespace="http://xmlns.oracle.com/GetDiagnostic/GetDiagnostic_DS"/>
    </target>
  </mapTargets>
  <!-- GENERATED BY ORACLE XSL MAPPER 11.1.1.7.0(build 130301.0647.0008) AT [FRI OCT 04 18:11:31 CDT 2013]. -->
?>
<xsl:stylesheet version="1.0"
                xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
                xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
                xmlns:ns0="http://schemas.microsoft.com/2003/10/Serialization/"
                xmlns:aus="http://service.cablevision.net.mx/"
                xmlns:bpel="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xmlns:bpelpm="http://xmlns.oracle.com/bpel"
                xmlns:bpm="http://xmlns.oracle.com/bpmn20/extensions"
                xmlns:ns2="http://xmlns.cablevision.net.mx/DrCable_SOA/DrCable/OrNOCDiagnostico"
                xmlns:ora="http://schemas.oracle.com/xpath/extension"
                xmlns:socket="http://www.oracle.com/XSL/Transform/java/oracle.tip.adapter.socket.ProtocolTranslator"
                xmlns:rules="http://xmlns.oracle.com/bpel/rules"
                xmlns:hab="http://schemas.datacontract.org/2004/07/AMDrCable"
                xmlns:mhdr="http://www.oracle.com/XSL/Transform/java/oracle.tip.mediator.service.common.functions.MediatorExtnFunction"
                xmlns:oraext="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
                xmlns:dvm="http://www.oracle.com/XSL/Transform/java/oracle.tip.dvm.LookupValue"
                xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath"
                xmlns:med="http://schemas.oracle.com/mediator/xpath"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath"
                xmlns:xdk="http://schemas.oracle.com/bpel/extension/xpath/function/xdk"
                xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
                xmlns:tns="http://xmlns.cablevision.net.mx/DrCable_SOA/DrCable/OrNOCBuscaStatusNow"
                xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                xmlns:ns1="http://xmlns.oracle.com/GetDiagnostic/GetDiagnostic_DS"
                xmlns:bpmn="http://schemas.oracle.com/bpm/xpath"
                xmlns:ldap="http://schemas.oracle.com/xpath/extension/ldap"
                exclude-result-prefixes="xsi xsl ns0 aus hab tns xsd bpelpm ns2 rules ns1 xp20 bpws bpel bpm ora socket mhdr oraext dvm hwf med ids xdk xref bpmn ldap">
  <xsl:template match="/">
    <ns1:callFunctionStateless>
      <xsl:attribute name="name">
        <xsl:text disable-output-escaping="no">GetDiagnostic_DS</xsl:text>
      </xsl:attribute>
      <ns1:parameterList>
        <ns2:process>
          <xsl:if test="count(/tns:processResponse/tns:status/cmts/modemStatus) > 0.0">
            <ns2:statusModem>
              <xsl:value-of select="/tns:processResponse/tns:status/cmts/modemStatus"/>
            </ns2:statusModem>
          </xsl:if>
          <xsl:if test="count(/tns:processResponse/tns:status/internet/cmConfigurationFile) > 0.0">
            <ns2:configFile>
              <xsl:value-of select="/tns:processResponse/tns:status/internet/cmConfigurationFile"/>
            </ns2:configFile>
          </xsl:if>
          <xsl:for-each select="/tns:processResponse/tns:status/internet/downstreamSignalNoiseRatio/transmitPower">
            <xsl:if test="position() = 1.0">
              <ns2:signalNoiseRatio>
                <xsl:value-of select="valor"/>
              </ns2:signalNoiseRatio>
            </xsl:if>
          </xsl:for-each>
          <xsl:if test="count(/tns:processResponse/tns:status/internet/upstreamTransmitPower/valor) > 0.0">
            <ns2:upStream>
              <xsl:value-of select="/tns:processResponse/tns:status/internet/upstreamTransmitPower/valor"/>
            </ns2:upStream>
          </xsl:if>
          <xsl:for-each select="/tns:processResponse/tns:status/internet/downstreamReceivePower/transmitPower">
            <xsl:if test="position() = 1.0">
              <ns2:downStream>
                <xsl:value-of select="valor"/>
              </ns2:downStream>
            </xsl:if>
          </xsl:for-each>
          <xsl:if test="count(/tns:processResponse/tns:status/internet/systemUpTime) > 0.0">
            <ns2:systemUpTime>
              <xsl:value-of select="substring(/tns:processResponse/tns:status/internet/systemUpTime, 1, 1)"/>
            </ns2:systemUpTime>
          </xsl:if>
          <xsl:if test="count(/tns:processResponse/tns:status/internet/resets) > 0.0">
            <ns2:reset>
              <xsl:value-of select="/tns:processResponse/tns:status/internet/resets"/>
            </ns2:reset>
          </xsl:if>
          <xsl:if test="count(/tns:processResponse/tns:status/internet/lostSyncs) > 0.0">
            <ns2:lostSyncs>
              <xsl:value-of select="/tns:processResponse/tns:status/internet/lostSyncs"/>
            </ns2:lostSyncs>
          </xsl:if>
        </ns2:process>
      </ns1:parameterList>
    </ns1:callFunctionStateless>
  </xsl:template>
</xsl:stylesheet>
